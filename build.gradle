plugins {
    id('java')
    id('java-library')
    id('com.github.johnrengelman.shadow') version '7.0.0'
    id('net.kyori.indra.git') version '2.0.6'
    id('net.kyori.indra') version '2.0.6'
    id('net.kyori.indra.publishing') version '2.0.6'
}

def determinePatchVersion = {
    if (!indraGit.isPresent()) {
        return "UNKNOWN"
    }

    if (!indraGit.describe().contains('-')) {
        return 0
    }

    return indraGit.describe().split("-")[1]
}

project.ext.majorVersion = '1'
project.ext.minorVersion = '0'
project.ext.patchVersion = determinePatchVersion()
project.ext.apiVersion = project.ext.majorVersion + '.' + project.ext.minorVersion
project.ext.fullVersion = project.ext.apiVersion + '.' + project.ext.patchVersion

group('net.deltapvp')
version("${project.ext.apiVersion}-SNAPSHOT")

repositories {
    mavenCentral()
    maven { url = uri('https://repo.deltapvp.net/')}
    mavenLocal()
}

dependencies {
    compileOnly('net.hylist:spigot-server:1.7.10-R0.1-SNAPSHOT')
    implementation('org.mongodb:mongodb-driver-legacy:4.3.1')
    implementation('com.google.code.gson:gson:2.8.7')
}

configurations.all {
    // we use jetbrains annotations
    exclude group: "org.checkerframework", module: "checker-qual"
    exclude(module: 'checker-qual')
    exclude(module: 'annotations')
    exclude(module: 'error_prone_core')
    exclude(module: 'error_prone')
    exclude(module: 'errorprone')
    exclude(module: 'error_prone_annotations')
}

shadowJar {
    def things = [
            'org.mongodb'
    ]

    things.forEach {
        relocate(it, 'net.deltapvp.blocklog.lib.' + it)
    }

    minimize()
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add('-Xlint:-deprecation')
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

javadoc {
    title = "${project.name} API (v ${project.version})"
    options.links(
            'https://papermc.io/javadocs/paper/1.17/',
            'https://ci.md-5.net/job/BungeeCord/ws/api/target/apidocs/',
            'https://hub.spigotmc.org/javadocs/spigot/',
            'https://papermc.io/javadocs/waterfall/',
            'https://jd.velocitypowered.com/3.0.0/',
            'https://javadoc.io/doc/',
            'https://jd.adventure.kyori.net/api/4.8.1/',
            'https://jd.adventure.kyori.net/text-serializer-legacy/4.8.1/',
            'https://jd.adventure.kyori.net/text-serializer-gson/4.8.1/',
            'https://jd.adventure.kyori.net/key/4.8.1/',
            'https://docs.oracle.com/javase/8/docs/api/'
    )
    options.addBooleanOption('Xdoclint:none', true)
}

processResources {
    def props = [version: project.ext.fullVersion]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

indra {
    github('powercasgamer', 'BlockLog')
    mitLicense()
    publishAllTo('delta', 'https://repos.deltapvp.net/all/')

    javaVersions {
        testWith(8, 11, 16)
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}


